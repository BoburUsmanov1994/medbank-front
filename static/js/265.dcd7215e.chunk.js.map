{"version":3,"file":"static/js/265.dcd7215e.chunk.js","mappings":"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","sources":["containers/form/components/Input.jsx","containers/form/components/Select.jsx","containers/form/components/Datepicker.jsx","containers/form/index.jsx","modules/settings/containers/TranslationsContainer.jsx","modules/settings/pages/TranslationsPage.jsx"],"sourcesContent":["import React from 'react';\r\nimport clsx from \"clsx\";\r\nimport {get, hasIn} from \"lodash\";\r\n\r\nconst Input = ({register, name, errors, property, params, label = '', ...rest}) => {\r\n    return (\r\n        <>\r\n            <div className=\"form-group\">\r\n                <label className={'form-label'} htmlFor=\"#\">{label}</label>\r\n                <input  {...register(name, {...params})} {...rest}\r\n                        className={clsx('form-input', {'border-red-600': hasIn(errors, name)})}\r\n                        type={get(property, 'type', \"text\")}  disabled={get(property, 'disabled', false)} step={get(property, \"step\", \"any\")}/>\r\n                {errors[name]?.type == 'required' &&\r\n                    <span className={'text-red-600 text-xs'}>This field is required</span>}\r\n                {errors[name]?.type == 'validation' &&\r\n                    <span className={'text-red-600 text-xs'}>{get(errors, `${name}.message`)}</span>}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Input;","import React from 'react';\r\nimport RSelect, {components} from 'react-select';\r\nimport clsx from \"clsx\";\r\nimport arrowIcon from \"../../../assets/icons/select-arrow.svg\";\r\nimport {Controller} from \"react-hook-form\";\r\nimport {get, hasIn} from \"lodash\";\r\nimport placeholder from \"lodash/fp/placeholder\";\r\n\r\nconst DropdownIndicator = props => {\r\n    return (\r\n        components.DropdownIndicator && (\r\n            <components.DropdownIndicator {...props}>\r\n                <img src={arrowIcon} alt={'arrow'}/>\r\n            </components.DropdownIndicator>\r\n        )\r\n    );\r\n};\r\nconst customStyles = (hasError = false) => ({\r\n    control: (base, state, error) => ({\r\n        ...base,\r\n        background: \"#fff\",\r\n        borderColor: hasError ? \"red\" : \"rgba(0, 0, 0, 0.1)\",\r\n        borderRadius: '8px',\r\n        outline: \"none\",\r\n        display: \"flex\",\r\n        overflow: 'hidden',\r\n        padding: '4px 12px',\r\n        width: '100%',\r\n        minWidth: '200px',\r\n        minHeight: '48px',\r\n        fontSize: '16px',\r\n        fontWeight: '400',\r\n        \"&:hover\": {\r\n            borderColor: '#006D85',\r\n            outline: \"none\",\r\n        },\r\n        \"&:focus\": {\r\n            borderColor: '#006D85',\r\n            outline: \"none\",\r\n        }\r\n    }),\r\n    indicatorSeparator: (base, state) => ({\r\n        ...base,\r\n        display: 'none'\r\n    })\r\n});\r\nconst Select = ({\r\n                    control, name, errors, placeholder = 'Не выбран', params, label = '', options = []\r\n                }) => {\r\n\r\n    return (\r\n        <div className={clsx(`form-group`)}>\r\n            {label && <label className={clsx('form-label')}\r\n                             htmlFor={label}>{label}</label>}\r\n            <Controller\r\n                control={control}\r\n                name={name}\r\n                rules={params}\r\n                render={({field}) => <RSelect\r\n                    {...field}\r\n                    clearIndicator={true}\r\n                    styles={customStyles(hasIn(errors, name))}\r\n                    id={label}\r\n                    options={options}\r\n                    components={{DropdownIndicator}}\r\n                    placeholder={placeholder}\r\n                />}\r\n            />\r\n            {errors[name]?.type == 'required' &&\r\n                <span className={'text-red-600 text-xs'}>This field is required</span>}\r\n            {errors[name]?.type == 'validation' &&\r\n                <span className={'text-red-600 text-xs'}>{get(errors, `${name}.message`)}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Select;","import React from 'react';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport {Controller} from \"react-hook-form\";\r\nimport {get, hasIn} from \"lodash\";\r\nimport dayjs from \"dayjs\";\r\nimport clsx from \"clsx\";\r\n\r\n\r\nconst CustomDatepicker = ({\r\n                              control,\r\n                              disabled = false,\r\n                              name,\r\n                              errors,\r\n                              params,\r\n                              property,\r\n                              defaultValue = new Date(),\r\n                              label,\r\n                              dateFormat = \"yyyy/MM/dd\",\r\n                          }) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label className={'form-label'}>{label ?? name}</label>\r\n            <Controller\r\n                control={control}\r\n                name={name}\r\n                rules={params}\r\n                defaultValue={defaultValue}\r\n                render={({field}) => (<DatePicker\r\n                    dateFormat={dateFormat}\r\n                    selected={dayjs(field.value).toDate()}\r\n                    onChange={(date) => field.onChange(date)}\r\n                    readOnly={disabled}\r\n                    showMonthYearPicker={get(property, 'showMonthYearPicker')}\r\n                    className={clsx('form-input pr-10', {'border-red-600': hasIn(errors, name)})}\r\n                />)\r\n                }\r\n            />\r\n            {errors[name]?.type == 'required' &&\r\n                <span className={'text-red-600 text-xs'}>This field is required</span>}\r\n            {errors[name]?.type == 'validation' &&\r\n                <span className={'text-red-600 text-xs'}>{get(errors, `${name}.message`)}</span>}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CustomDatepicker;","import React from 'react';\r\nimport {useForm} from \"react-hook-form\";\r\n\r\nconst Form = ({defaultValues, children, onSubmit}) => {\r\n    const methods = useForm({defaultValues});\r\n    const {handleSubmit, formState: {errors}, setError, clearErrors, reset} = methods;\r\n    const onSubmitRequest = (data) => {\r\n        onSubmit({data, setError, clearErrors, reset})\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmitRequest)}>\r\n            {React.Children.map(children, child => {\r\n                return child.props.name\r\n                    ? React.createElement(child.type, {\r\n                        ...{\r\n                            ...child.props,\r\n                            control: methods.control,\r\n                            setValue: methods.setValue,\r\n                            register: methods.register,\r\n                            key: child.props.name,\r\n                            errors: errors\r\n                        }\r\n                    })\r\n                    : child;\r\n            })}\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Form;","import React, {useState} from 'react';\r\nimport Title from \"../../../components/title\";\r\nimport GridView from \"../../../containers/grid-view\";\r\nimport {KEYS} from \"../../../constants/keys\";\r\nimport {URLS} from \"../../../constants/urls\";\r\nimport Form from \"../../../containers/form\";\r\nimport {get} from \"lodash\";\r\nimport {Input} from \"../../../containers/form/components\";\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {useGetAllQuery} from \"../../../hooks/api\";\r\nimport {OverlayLoader} from \"../../../components/loader\";\r\n\r\n\r\n\r\nconst TranslationsContainer = () => {\r\n    const {data,isLoading} = useGetAllQuery({key: KEYS.locales, url: URLS.locales})\r\n    const {t} = useTranslation()\r\n    const [open, setOpen] = useState(false)\r\n    let columns = get(data,'data',[]).map(_locale=>({title:get(_locale,'display'),key:get(_locale,'code')}))\r\n    columns = [{\r\n        title: 'Key',\r\n        key: 'key',\r\n    },...columns]\r\n    if(isLoading){\r\n        return <OverlayLoader />\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"grid grid-cols-12 items-center\">\r\n                <div className=\"col-span-8\">\r\n                    <Title>{t(\"Translations\")}</Title>\r\n                </div>\r\n                <div className=\"col-span-12 mt-8\">\r\n                    <GridView\r\n                        ModalBody={(onSubmit, defaultValues = {}) => <Form onSubmit={(data) => onSubmit(data)}\r\n                                                                           defaultValues={{\r\n                                                                               ...get(defaultValues, 'data', {}),\r\n                                                                           }}>\r\n\r\n                            <Input property={{disabled:true}} name={'key'}\r\n                                   placeholder={t('Key')}\r\n                                   label={t('Key')}\r\n                            />\r\n                            {get(data,'data',[]).map(_locale=><Input name={get(_locale,'code')}\r\n                                                                     placeholder={get(_locale,'display')}\r\n                                                                     label={get(_locale,'display')}\r\n                            />)\r\n\r\n                            }\r\n\r\n\r\n                            <button type={'submit'}\r\n                                    className={'w-full p-3.5 rounded-lg bg-primary block w-full text-white font-bold text-center h-12 mt-6'}>\r\n                                {t('Save')}\r\n                            </button>\r\n                        </Form>}\r\n                        openCreateModal={open}\r\n                        setOpenCreateModal={setOpen}\r\n                        hasActionColumn\r\n                        listKey={KEYS.translations}\r\n                        url={URLS.translations}\r\n                        columns={columns}\r\n                        dataKey={'data.data'}\r\n                        rowKey={'key'}\r\n                        viewUrl={URLS.translationsKey}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TranslationsContainer;","import React from 'react';\r\nimport TranslationsContainer from \"../containers/TranslationsContainer\";\r\n\r\nconst TranslationsPage = () => {\r\n    return (\r\n        <>\r\n            <TranslationsContainer />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TranslationsPage;"],"names":["_ref","_errors$name","_errors$name2","register","name","errors","property","params","_ref$label","label","rest","_objectWithoutProperties","_excluded","_jsx","_Fragment","children","_jsxs","className","htmlFor","_objectSpread","clsx","hasIn","type","get","disabled","step","concat","DropdownIndicator","props","components","src","arrowIcon","alt","customStyles","hasError","arguments","length","undefined","control","base","state","error","background","borderColor","borderRadius","outline","display","overflow","padding","width","minWidth","minHeight","fontSize","fontWeight","indicatorSeparator","_ref$placeholder","placeholder","_ref$options","options","Controller","rules","render","_ref2","field","RSelect","clearIndicator","styles","id","_ref$disabled","_ref$defaultValue","defaultValue","Date","_ref$dateFormat","dateFormat","DatePicker","selected","dayjs","value","toDate","onChange","date","readOnly","showMonthYearPicker","defaultValues","onSubmit","methods","useForm","handleSubmit","formState","setError","clearErrors","reset","data","React","child","setValue","key","_useGetAllQuery","useGetAllQuery","KEYS","url","URLS","isLoading","t","useTranslation","_useState","useState","_useState2","_slicedToArray","open","setOpen","columns","map","_locale","title","_toConsumableArray","OverlayLoader","Title","GridView","ModalBody","Form","Input","openCreateModal","setOpenCreateModal","hasActionColumn","listKey","dataKey","rowKey","viewUrl","TranslationsContainer"],"sourceRoot":""}