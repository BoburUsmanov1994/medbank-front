{"version":3,"file":"static/js/323.0d48b609.chunk.js","mappings":"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","sources":["containers/form/components/Input.jsx","containers/form/components/Select.jsx","containers/form/components/Datepicker.jsx","containers/form/index.jsx","modules/references/containers/BaseRatesContainer.jsx","modules/references/pages/BaseRatesPage.jsx"],"sourcesContent":["import React from 'react';\r\nimport clsx from \"clsx\";\r\nimport {get, hasIn} from \"lodash\";\r\n\r\nconst Input = ({register, name, errors, property, params, label = '', ...rest}) => {\r\n    return (\r\n        <>\r\n            <div className=\"form-group\">\r\n                <label className={'form-label'} htmlFor=\"#\">{label}</label>\r\n                <input  {...register(name, {...params})} {...rest}\r\n                        className={clsx('form-input', {'border-red-600': hasIn(errors, name)})}\r\n                        type={get(property, 'type', \"text\")} step={get(property, \"step\", \"any\")}/>\r\n                {errors[name]?.type == 'required' &&\r\n                    <span className={'text-red-600 text-xs'}>This field is required</span>}\r\n                {errors[name]?.type == 'validation' &&\r\n                    <span className={'text-red-600 text-xs'}>{get(errors, `${name}.message`)}</span>}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Input;","import React from 'react';\r\nimport RSelect, {components} from 'react-select';\r\nimport clsx from \"clsx\";\r\nimport arrowIcon from \"../../../assets/icons/select-arrow.svg\";\r\nimport {Controller} from \"react-hook-form\";\r\nimport {get, hasIn} from \"lodash\";\r\nimport placeholder from \"lodash/fp/placeholder\";\r\n\r\nconst DropdownIndicator = props => {\r\n    return (\r\n        components.DropdownIndicator && (\r\n            <components.DropdownIndicator {...props}>\r\n                <img src={arrowIcon} alt={'arrow'}/>\r\n            </components.DropdownIndicator>\r\n        )\r\n    );\r\n};\r\nconst customStyles = (hasError = false) => ({\r\n    control: (base, state, error) => ({\r\n        ...base,\r\n        background: \"#fff\",\r\n        borderColor: hasError ? \"red\" : \"rgba(0, 0, 0, 0.1)\",\r\n        borderRadius: '8px',\r\n        outline: \"none\",\r\n        display: \"flex\",\r\n        overflow: 'hidden',\r\n        padding: '4px 12px',\r\n        width: '100%',\r\n        minWidth: '200px',\r\n        minHeight: '48px',\r\n        fontSize: '16px',\r\n        fontWeight: '400',\r\n        \"&:hover\": {\r\n            borderColor: '#006D85',\r\n            outline: \"none\",\r\n        },\r\n        \"&:focus\": {\r\n            borderColor: '#006D85',\r\n            outline: \"none\",\r\n        }\r\n    }),\r\n    indicatorSeparator: (base, state) => ({\r\n        ...base,\r\n        display: 'none'\r\n    })\r\n});\r\nconst Select = ({\r\n                    control, name, errors, placeholder = 'Не выбран', params, label = '', options = []\r\n                }) => {\r\n\r\n    return (\r\n        <div className={clsx(`form-group`)}>\r\n            {label && <label className={clsx('form-label')}\r\n                             htmlFor={label}>{label}</label>}\r\n            <Controller\r\n                control={control}\r\n                name={name}\r\n                rules={params}\r\n                render={({field}) => <RSelect\r\n                    {...field}\r\n                    clearIndicator={true}\r\n                    styles={customStyles(hasIn(errors, name))}\r\n                    id={label}\r\n                    options={options}\r\n                    components={{DropdownIndicator}}\r\n                    placeholder={placeholder}\r\n                />}\r\n            />\r\n            {errors[name]?.type == 'required' &&\r\n                <span className={'text-red-600 text-xs'}>This field is required</span>}\r\n            {errors[name]?.type == 'validation' &&\r\n                <span className={'text-red-600 text-xs'}>{get(errors, `${name}.message`)}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Select;","import React from 'react';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport {Controller} from \"react-hook-form\";\r\nimport {get, hasIn} from \"lodash\";\r\nimport dayjs from \"dayjs\";\r\nimport clsx from \"clsx\";\r\n\r\n\r\nconst CustomDatepicker = ({\r\n                              control,\r\n                              disabled = false,\r\n                              name,\r\n                              errors,\r\n                              params,\r\n                              property,\r\n                              defaultValue = new Date(),\r\n                              label,\r\n                              dateFormat = \"yyyy/MM/dd\",\r\n                          }) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label className={'form-label'}>{label ?? name}</label>\r\n            <Controller\r\n                control={control}\r\n                name={name}\r\n                rules={params}\r\n                defaultValue={defaultValue}\r\n                render={({field}) => (<DatePicker\r\n                    dateFormat={dateFormat}\r\n                    selected={dayjs(field.value).toDate()}\r\n                    onChange={(date) => field.onChange(date)}\r\n                    readOnly={disabled}\r\n                    showMonthYearPicker={get(property, 'showMonthYearPicker')}\r\n                    className={clsx('form-input pr-10', {'border-red-600': hasIn(errors, name)})}\r\n                />)\r\n                }\r\n            />\r\n            {errors[name]?.type == 'required' &&\r\n                <span className={'text-red-600 text-xs'}>This field is required</span>}\r\n            {errors[name]?.type == 'validation' &&\r\n                <span className={'text-red-600 text-xs'}>{get(errors, `${name}.message`)}</span>}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CustomDatepicker;","import React from 'react';\r\nimport {useForm} from \"react-hook-form\";\r\n\r\nconst Form = ({defaultValues, children, onSubmit}) => {\r\n    const methods = useForm({defaultValues});\r\n    const {handleSubmit, formState: {errors}, setError, clearErrors, reset} = methods;\r\n    const onSubmitRequest = (data) => {\r\n        onSubmit({data, setError, clearErrors, reset})\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmitRequest)}>\r\n            {React.Children.map(children, child => {\r\n                return child.props.name\r\n                    ? React.createElement(child.type, {\r\n                        ...{\r\n                            ...child.props,\r\n                            control: methods.control,\r\n                            setValue: methods.setValue,\r\n                            register: methods.register,\r\n                            key: child.props.name,\r\n                            errors: errors\r\n                        }\r\n                    })\r\n                    : child;\r\n            })}\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Form;","import React, {useState} from 'react';\r\nimport Title from \"../../../components/title\";\r\nimport GridView from \"../../../containers/grid-view\";\r\nimport {KEYS} from \"../../../constants/keys\";\r\nimport {URLS} from \"../../../constants/urls\";\r\nimport {PlusCircle} from \"react-feather\";\r\nimport {NumericFormat} from \"react-number-format\";\r\nimport Form from \"../../../containers/form\";\r\nimport {get} from \"lodash\";\r\nimport {Datepicker, Input, Select} from \"../../../containers/form/components\";\r\n\r\nconst columns = [\r\n    {\r\n        title: 'ID',\r\n        key: 'id',\r\n        classnames: '!w-[80px] !min-w-0'\r\n    },\r\n    {\r\n        title: 'Month',\r\n        key: 'month',\r\n    },\r\n    {\r\n        title: 'Organization level',\r\n        key: 'organization_level',\r\n    },\r\n    {\r\n        title: 'Organization type',\r\n        key: 'organization_type',\r\n    },\r\n    {\r\n        title: 'Amount by count',\r\n        key: 'amount_by_count',\r\n        render: ({value}) => <NumericFormat displayType={'text'} thousandSeparator={' '} value={value}/>\r\n    },\r\n    {\r\n        title: 'Amount by group',\r\n        key: 'amount_by_group',\r\n        render: ({value}) => <NumericFormat displayType={'text'} thousandSeparator={' '} value={value}/>\r\n    },\r\n]\r\nconst BaseRatesContainer = () => {\r\n    const [open, setOpen] = useState(false)\r\n    return (\r\n        <div>\r\n            <div className=\"grid grid-cols-12 items-center\">\r\n                <div className=\"col-span-8\">\r\n                    <Title>Базовые ставки</Title>\r\n                </div>\r\n                <div className=\"col-span-4 text-right\">\r\n                    <button\r\n                        onClick={() => setOpen(true)}\r\n                        className={'inline-flex items-center py-2.5 pl-2.5 pr-5 text-sm font-bold text-primary border border-primary rounded-lg'}>\r\n                        <PlusCircle size={20} className={'mr-1.5'}/>\r\n                        Добавить\r\n                    </button>\r\n                </div>\r\n                <div className=\"col-span-12 mt-8\">\r\n                    <GridView\r\n                        ModalBody={(onSubmit, defaultValues = {}) => <Form onSubmit={(data) => onSubmit(data)}\r\n                                                                           defaultValues={get(defaultValues, 'data.data', {})}>\r\n                            <Select name={'organization_level_id'} label={'Organization level'}\r\n                                    params={{required: true}}\r\n                                    options={[]}/>\r\n                            <Select name={'organization_type_id'} label={'Organization type'} params={{required: true}}\r\n                                    options={[]}/>\r\n                            <Input name={'amount_by_group'} property={{type: 'number', step: 1}}\r\n                                   placeholder={'Amount by group'}\r\n                                   label={'Amount by group'}\r\n                            />\r\n                            <Input name={'amount_by_count'} property={{type: 'number', step: 1}}\r\n                                   placeholder={'Amount by count'}\r\n                                   label={'Amount by count'}\r\n                            />\r\n                            <Datepicker property={{showMonthYearPicker: true}} dateFormat={'MM'} name={'month'}\r\n                                        label={'Month'}\r\n                                        params={{required: true}}/>\r\n                            <button type={'submit'}\r\n                                    className={'w-full p-3.5 rounded-lg bg-primary block w-full text-white font-bold text-center h-12 mt-6'}>\r\n                                {open ? 'Create' : 'Save'}\r\n                            </button>\r\n                        </Form>}\r\n                        openCreateModal={open}\r\n                        setOpenCreateModal={setOpen}\r\n                        hasActionColumn\r\n                        listKey={KEYS.baseRates} url={URLS.baseRates}\r\n                        columns={columns}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BaseRatesContainer;","import React from 'react';\r\nimport BaseRatesContainer from \"../containers/BaseRatesContainer\";\r\n\r\nconst BaseRatesPage = () => {\r\n    return (\r\n        <>\r\n         <BaseRatesContainer />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BaseRatesPage;"],"names":["_ref","_errors$name","_errors$name2","register","name","errors","property","params","_ref$label","label","rest","_objectWithoutProperties","_excluded","_jsx","_Fragment","children","_jsxs","className","htmlFor","_objectSpread","clsx","hasIn","type","get","step","concat","DropdownIndicator","props","components","src","arrowIcon","alt","customStyles","hasError","arguments","length","undefined","control","base","state","error","background","borderColor","borderRadius","outline","display","overflow","padding","width","minWidth","minHeight","fontSize","fontWeight","indicatorSeparator","_ref$placeholder","placeholder","_ref$options","options","Controller","rules","render","_ref2","field","RSelect","clearIndicator","styles","id","_ref$disabled","disabled","_ref$defaultValue","defaultValue","Date","_ref$dateFormat","dateFormat","DatePicker","selected","dayjs","value","toDate","onChange","date","readOnly","showMonthYearPicker","defaultValues","onSubmit","methods","useForm","handleSubmit","formState","setError","clearErrors","reset","data","React","child","setValue","key","columns","title","classnames","NumericFormat","displayType","thousandSeparator","_useState","useState","_useState2","_slicedToArray","open","setOpen","Title","onClick","PlusCircle","size","GridView","ModalBody","Form","Select","required","Input","Datepicker","openCreateModal","setOpenCreateModal","hasActionColumn","listKey","KEYS","url","URLS","BaseRatesContainer"],"sourceRoot":""}