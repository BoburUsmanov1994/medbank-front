{"version":3,"file":"static/js/265.65acd57a.chunk.js","mappings":"qOAuBA,IAnBc,SAAHA,GAGW,IAADC,EAAAD,EAFFE,MAAAA,OAAK,IAAAD,EAAG,GAAEA,EAAAE,EAAAH,EAAEI,MAAAA,OAAK,IAAAD,EAAG,GAAEA,EAAAE,EAAAL,EAAEM,SAAAA,OAAQ,IAAAD,EAAG,WAClD,EAACA,EAAAE,EAAAP,EAAEQ,YAAAA,OAAW,IAAAD,EAAG,GAAEA,EAAAE,EAAAT,EAACU,WAAAA,OAAU,IAAAD,EAAC,GAAEA,EAAKE,GAAIC,EAAAA,EAAAA,GAAAZ,EAAAa,GAEpCC,GAAeC,EAAAA,EAAAA,UAAQ,SAACC,GAAC,OAAKC,EAAAA,EAAAA,WAAS,SAACD,GAC1CV,EAASU,EAAEE,OAAOd,MACtB,GAAG,IAAK,GAAE,IACV,OACIe,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIC,EAAAA,EAAAA,MAAA,OAAKC,WAAWC,EAAAA,EAAAA,GAAK,kBAAkBd,GAAYW,SAAA,EAC/CF,EAAAA,EAAAA,KAAA,SAAOI,UAAW,aAAcE,QAAQ,IAAGJ,SAAEnB,KAC7CiB,EAAAA,EAAAA,KAAA,SAAAO,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAAOlB,YAAaA,EAAamB,aAAcvB,EAAOwB,SAAUd,GAAmBH,GAAI,IAChFY,WAAWC,EAAAA,EAAAA,GAAK,cAChBK,KAAM,gBAI7B,C,oPCAA,EAjBc,SAAH7B,GAAyE,IAAD8B,EAAAC,EAAnEC,EAAQhC,EAARgC,SAAUC,EAAIjC,EAAJiC,KAAMC,EAAMlC,EAANkC,OAAQC,EAAQnC,EAARmC,SAAUC,EAAMpC,EAANoC,OAAMnC,EAAAD,EAAEE,MAAAA,OAAK,IAAAD,EAAG,GAAEA,EAAKU,GAAIC,EAAAA,EAAAA,GAAAZ,EAAAa,GACzE,OACIM,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYF,SAAA,EACvBF,EAAAA,EAAAA,KAAA,SAAOI,UAAW,aAAcE,QAAQ,IAAGJ,SAAEnB,KAC7CiB,EAAAA,EAAAA,KAAA,SAAAO,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAYM,EAASC,GAAIP,EAAAA,EAAAA,GAAA,GAAMU,KAAczB,GAAI,IACzCY,WAAWC,EAAAA,EAAAA,GAAK,aAAc,CAAC,kBAAkBa,EAAAA,EAAAA,OAAMH,EAAQD,KAC/DJ,MAAMS,EAAAA,EAAAA,KAAIH,EAAU,OAAQ,QAAUI,UAAUD,EAAAA,EAAAA,KAAIH,EAAU,YAAY,GAAQK,MAAMF,EAAAA,EAAAA,KAAIH,EAAU,OAAQ,UAC/F,aAAV,QAAZL,EAAAI,EAAOD,UAAK,IAAAH,OAAA,EAAZA,EAAcD,QACXV,EAAAA,EAAAA,KAAA,QAAMI,UAAW,uBAAuBF,SAAC,2BACtB,eAAV,QAAZU,EAAAG,EAAOD,UAAK,IAAAF,OAAA,EAAZA,EAAcF,QACXV,EAAAA,EAAAA,KAAA,QAAMI,UAAW,uBAAuBF,UAAEiB,EAAAA,EAAAA,KAAIJ,EAAO,GAADO,OAAKR,EAAI,mBAIjF,E,4CCXMS,G,SAAoB,SAAAC,GACtB,OACIC,EAAAA,EAAAA,oBACIzB,EAAAA,EAAAA,KAACyB,EAAAA,EAAAA,mBAA4BlB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKiB,GAAK,IAAAtB,UACnCF,EAAAA,EAAAA,KAAA,OAAK0B,IAAKC,EAAAA,EAAWC,IAAK,YAI1C,GACMC,EAAe,WAAH,IAAIC,EAAQC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAAQ,MAAM,CACxCG,QAAS,SAACC,EAAMC,EAAOC,GAAK,OAAA9B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACrB4B,GAAI,IACPG,WAAY,OACZC,YAAaT,EAAW,MAAQ,qBAChCU,aAAc,MACdC,QAAS,OACTC,QAAS,OACTC,SAAU,SACVC,QAAS,WACTC,MAAO,OACPC,SAAU,QACVC,UAAW,OACXC,SAAU,OACVC,WAAY,MACZ,UAAW,CACPV,YAAa,UACbE,QAAS,QAEb,UAAW,CACPF,YAAa,UACbE,QAAS,SACZ,EAELS,mBAAoB,SAACf,EAAMC,GAAK,OAAA7B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACzB4B,GAAI,IACPO,QAAS,QAAM,EAEtB,EA+BD,EA9Be,SAAH7D,GAEW,IAAD8B,EAAAC,EADFsB,EAAOrD,EAAPqD,QAASpB,EAAIjC,EAAJiC,KAAMC,EAAMlC,EAANkC,OAAM3B,EAAAP,EAAEQ,YAAAA,OAAW,IAAAD,EAAG,oDAAWA,EAAE6B,EAAMpC,EAANoC,OAAMnC,EAAAD,EAAEE,MAAAA,OAAK,IAAAD,EAAG,GAAEA,EAAAqE,EAAAtE,EAAEuE,QAAAA,OAAO,IAAAD,EAAG,GAAEA,EAGlG,OACIhD,EAAAA,EAAAA,MAAA,OAAKC,WAAWC,EAAAA,EAAAA,GAAK,cAAcH,SAAA,CAC9BnB,IAASiB,EAAAA,EAAAA,KAAA,SAAOI,WAAWC,EAAAA,EAAAA,GAAK,cAChBC,QAASvB,EAAMmB,SAAEnB,KAClCiB,EAAAA,EAAAA,KAACqD,EAAAA,GAAU,CACPnB,QAASA,EACTpB,KAAMA,EACNwC,MAAOrC,EACPsC,OAAQ,SAAAC,GAAA,IAAEC,EAAKD,EAALC,MAAK,OAAMzD,EAAAA,EAAAA,KAAC0D,EAAAA,IAAOnD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACrBkD,GAAK,IACTE,gBAAgB,EAChBC,OAAQ/B,GAAaX,EAAAA,EAAAA,OAAMH,EAAQD,IACnC+C,GAAI9E,EACJqE,QAASA,EACT3B,WAAY,CAACF,kBAAAA,GACblC,YAAaA,IACf,IAEiB,aAAV,QAAZsB,EAAAI,EAAOD,UAAK,IAAAH,OAAA,EAAZA,EAAcD,QACXV,EAAAA,EAAAA,KAAA,QAAMI,UAAW,uBAAuBF,SAAC,2BACtB,eAAV,QAAZU,EAAAG,EAAOD,UAAK,IAAAF,OAAA,EAAZA,EAAcF,QACXV,EAAAA,EAAAA,KAAA,QAAMI,UAAW,uBAAuBF,UAAEiB,EAAAA,EAAAA,KAAIJ,EAAO,GAADO,OAAKR,EAAI,iBAG7E,E,mDC3BA,EAtCyB,SAAHjC,GAUW,IAAD8B,EAAAC,EATFsB,EAAOrD,EAAPqD,QAAO4B,EAAAjF,EACPuC,SAAAA,OAAQ,IAAA0C,GAAQA,EAChBhD,EAAIjC,EAAJiC,KACAC,EAAMlC,EAANkC,OACAE,EAAMpC,EAANoC,OACAD,EAAQnC,EAARmC,SAAQ+C,EAAAlF,EACR2B,aAAAA,OAAY,IAAAuD,EAAG,IAAIC,KAAMD,EACzBhF,EAAKF,EAALE,MAAKkF,EAAApF,EACLqF,WAAAA,OAAU,IAAAD,EAAG,aAAYA,EAEnD,OACI9D,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYF,SAAA,EACvBF,EAAAA,EAAAA,KAAA,SAAOI,UAAW,aAAaF,SAAO,OAALnB,QAAK,IAALA,EAAAA,EAAS+B,KAC1Cd,EAAAA,EAAAA,KAACqD,EAAAA,GAAU,CACPnB,QAASA,EACTpB,KAAMA,EACNwC,MAAOrC,EACPT,aAAcA,EACd+C,OAAQ,SAAAC,GAAA,IAAEC,EAAKD,EAALC,MAAK,OAAOzD,EAAAA,EAAAA,KAACmE,IAAU,CAC7BD,WAAYA,EACZE,SAAUC,IAAMZ,EAAMxE,OAAOqF,SAC7B7D,SAAU,SAAC8D,GAAI,OAAKd,EAAMhD,SAAS8D,EAAK,EACxCC,SAAUpD,EACVqD,qBAAqBtD,EAAAA,EAAAA,KAAIH,EAAU,uBACnCZ,WAAWC,EAAAA,EAAAA,GAAK,mBAAoB,CAAC,kBAAkBa,EAAAA,EAAAA,OAAMH,EAAQD,MACvE,IAGiB,aAAV,QAAZH,EAAAI,EAAOD,UAAK,IAAAH,OAAA,EAAZA,EAAcD,QACXV,EAAAA,EAAAA,KAAA,QAAMI,UAAW,uBAAuBF,SAAC,2BACtB,eAAV,QAAZU,EAAAG,EAAOD,UAAK,IAAAF,OAAA,EAAZA,EAAcF,QACXV,EAAAA,EAAAA,KAAA,QAAMI,UAAW,uBAAuBF,UAAEiB,EAAAA,EAAAA,KAAIJ,EAAO,GAADO,OAAKR,EAAI,iBAI7E,C,oFChBA,IA1Ba,SAAHjC,GAA6C,IAAxC6F,EAAa7F,EAAb6F,cAAexE,EAAQrB,EAARqB,SAAUyE,EAAQ9F,EAAR8F,SAC9BC,GAAUC,EAAAA,EAAAA,IAAQ,CAACH,cAAAA,IAClBI,EAAmEF,EAAnEE,aAA0B/D,EAAyC6D,EAArDG,UAAYhE,OAASiE,EAAgCJ,EAAhCI,SAAUC,EAAsBL,EAAtBK,YAAaC,EAASN,EAATM,MAIjE,OACIlF,EAAAA,EAAAA,KAAA,QAAM2E,SAAUG,GAJI,SAACK,GACrBR,EAAS,CAACQ,KAAAA,EAAMH,SAAAA,EAAUC,YAAAA,EAAaC,MAAAA,GAC3C,IAEkDhF,SACzCkF,EAAAA,SAAAA,IAAmBlF,GAAU,SAAAmF,GAC1B,OAAOA,EAAM7D,MAAMV,KACbsE,EAAAA,cAAoBC,EAAM3E,MAAIH,EAAAA,EAAAA,GAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAErB8E,EAAM7D,OAAK,IACdU,QAAS0C,EAAQ1C,QACjB/C,SAAUyF,EAAQzF,SAClB0B,SAAU+D,EAAQ/D,SAClByE,IAAKD,EAAM7D,MAAMV,KACjBC,OAAQA,MAGdsE,CACV,KAGZ,C,mQCoDA,EAjE8B,WAC1B,IAAAE,GAA4BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GACxBI,GAA0BC,EAAAA,EAAAA,IAAe,CAACR,IAAKS,EAAAA,EAAAA,QAAcC,IAAKC,EAAAA,EAAAA,UAA3Dd,EAAIU,EAAJV,KAAMe,EAASL,EAATK,UACNC,GAAKC,EAAAA,EAAAA,MAALD,EACPE,GAAwBb,EAAAA,EAAAA,WAAS,GAAMc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAAhCE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GAChBG,GAAUtF,EAAAA,EAAAA,KAAIgE,EAAM,OAAQ,IAAIuB,KAAI,SAAAC,GAAO,MAAK,CAACC,OAAOzF,EAAAA,EAAAA,KAAIwF,EAAS,WAAYrB,KAAKnE,EAAAA,EAAAA,KAAIwF,EAAS,QAAQ,IAK/G,OAJAF,EAAO,CAAI,CACPG,MAAO,MACPtB,IAAK,QACRhE,QAAAuF,EAAAA,EAAAA,GAAKJ,IACFP,GACOlG,EAAAA,EAAAA,KAAC8G,EAAAA,EAAa,KAGrB9G,EAAAA,EAAAA,KAAA,OAAAE,UACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iCAAgCF,SAAA,EAC3CF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,aAAYF,UACvBF,EAAAA,EAAAA,KAAC+G,EAAAA,EAAK,CAAA7G,SAAEiG,EAAE,qBAEdnG,EAAAA,EAAAA,KAAA,OAAKI,UAAU,mBAAkBF,UAC7BF,EAAAA,EAAAA,KAACgH,EAAAA,EAAQ,CACLC,SAASjH,EAAAA,EAAAA,KAAA,OAAKI,UAAW,iCAAiCF,UACtDF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,aAAYF,UACvBF,EAAAA,EAAAA,KAACkH,EAAAA,EAAW,CAAC/H,SAAUyG,EAAW3G,MAAO0G,EAAQtG,YAAa8G,EAAE,wCAGxEgB,UAAW,SAACxC,GAAQ,IAAED,EAAa3C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,OAAK5B,EAAAA,EAAAA,MAACiH,EAAAA,EAAI,CAACzC,SAAU,SAACQ,GAAI,OAAKR,EAASQ,EAAK,EAClCT,eAAanE,EAAAA,EAAAA,GAAA,IACNY,EAAAA,EAAAA,KAAIuD,EAAe,OAAQ,CAAC,IACjCxE,SAAA,EAEjDF,EAAAA,EAAAA,KAACqH,EAAAA,GAAK,CAACrG,SAAU,CAACI,UAAU,GAAON,KAAM,MAClCzB,YAAa8G,EAAE,OACfpH,MAAOoH,EAAE,UAEfhF,EAAAA,EAAAA,KAAIgE,EAAM,OAAQ,IAAIuB,KAAI,SAAAC,GAAO,OAAI3G,EAAAA,EAAAA,KAACqH,EAAAA,GAAK,CAAC9H,WAAY,OAAQuB,MAAMK,EAAAA,EAAAA,KAAIwF,EAAS,QACvCtH,aAAa8B,EAAAA,EAAAA,KAAIwF,EAAS,WAC1B5H,OAAOoC,EAAAA,EAAAA,KAAIwF,EAAS,YAC/D,KAKF3G,EAAAA,EAAAA,KAAA,UAAQU,KAAM,SACNN,UAAW,uFAAuFF,SACrGiG,EAAE,YAEJ,EACPmB,gBAAiBf,EACjBgB,mBAAoBf,EACpBgB,iBAAe,EACfC,QAAS1B,EAAAA,EAAAA,aACTC,IAAKC,EAAAA,EAAAA,aACLQ,QAASA,EACTiB,QAAS,YACTC,OAAQ,MACR1G,OAAQ,CAAC0E,OAAAA,GACTiC,QAAS3B,EAAAA,EAAAA,wBAMjC,EClEA,EARyB,WACrB,OACIjG,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIF,EAAAA,EAAAA,KAAC6H,EAAqB,KAGlC,C,oBCJAC,EAAOC,QAAU,CAAC,C","sources":["components/input/index.jsx","containers/form/components/Input.jsx","containers/form/components/Select.jsx","containers/form/components/Datepicker.jsx","containers/form/index.jsx","modules/settings/containers/TranslationsContainer.jsx","modules/settings/pages/TranslationsPage.jsx","../node_modules/lodash/fp/placeholder.js"],"sourcesContent":["import React, {useMemo} from 'react';\r\nimport clsx from \"clsx\";\r\nimport {debounce} from \"lodash\"\r\n\r\nconst Input = ({\r\n                   label = '', value = '', setValue = () => {\r\n    }, placeholder = '',classNames='', ...rest\r\n               }) => {\r\n    const handleChange = useMemo((e) => debounce((e) => {\r\n        setValue(e.target.value)\r\n    }, 1000), [])\r\n    return (\r\n        <>\r\n            <div className={clsx(\"form-group mb-0\",classNames)}>\r\n                <label className={'form-label'} htmlFor=\"#\">{label}</label>\r\n                <input placeholder={placeholder} defaultValue={value} onChange={handleChange}  {...rest}\r\n                       className={clsx('form-input')}\r\n                       type={\"search\"}/>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Input;","import React from 'react';\r\nimport clsx from \"clsx\";\r\nimport {get, hasIn} from \"lodash\";\r\n\r\nconst Input = ({register, name, errors, property, params, label = '', ...rest}) => {\r\n    return (\r\n        <>\r\n            <div className=\"form-group\">\r\n                <label className={'form-label'} htmlFor=\"#\">{label}</label>\r\n                <input  {...register(name, {...params})} {...rest}\r\n                        className={clsx('form-input', {'border-red-600': hasIn(errors, name)})}\r\n                        type={get(property, 'type', \"text\")}  disabled={get(property, 'disabled', false)} step={get(property, \"step\", \"any\")}/>\r\n                {errors[name]?.type == 'required' &&\r\n                    <span className={'text-red-600 text-xs'}>This field is required</span>}\r\n                {errors[name]?.type == 'validation' &&\r\n                    <span className={'text-red-600 text-xs'}>{get(errors, `${name}.message`)}</span>}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Input;","import React from 'react';\r\nimport RSelect, {components} from 'react-select';\r\nimport clsx from \"clsx\";\r\nimport arrowIcon from \"../../../assets/icons/select-arrow.svg\";\r\nimport {Controller} from \"react-hook-form\";\r\nimport {get, hasIn} from \"lodash\";\r\nimport placeholder from \"lodash/fp/placeholder\";\r\n\r\nconst DropdownIndicator = props => {\r\n    return (\r\n        components.DropdownIndicator && (\r\n            <components.DropdownIndicator {...props}>\r\n                <img src={arrowIcon} alt={'arrow'}/>\r\n            </components.DropdownIndicator>\r\n        )\r\n    );\r\n};\r\nconst customStyles = (hasError = false) => ({\r\n    control: (base, state, error) => ({\r\n        ...base,\r\n        background: \"#fff\",\r\n        borderColor: hasError ? \"red\" : \"rgba(0, 0, 0, 0.1)\",\r\n        borderRadius: '8px',\r\n        outline: \"none\",\r\n        display: \"flex\",\r\n        overflow: 'hidden',\r\n        padding: '4px 12px',\r\n        width: '100%',\r\n        minWidth: '200px',\r\n        minHeight: '48px',\r\n        fontSize: '16px',\r\n        fontWeight: '400',\r\n        \"&:hover\": {\r\n            borderColor: '#006D85',\r\n            outline: \"none\",\r\n        },\r\n        \"&:focus\": {\r\n            borderColor: '#006D85',\r\n            outline: \"none\",\r\n        }\r\n    }),\r\n    indicatorSeparator: (base, state) => ({\r\n        ...base,\r\n        display: 'none'\r\n    })\r\n});\r\nconst Select = ({\r\n                    control, name, errors, placeholder = 'Не выбран', params, label = '', options = []\r\n                }) => {\r\n\r\n    return (\r\n        <div className={clsx(`form-group`)}>\r\n            {label && <label className={clsx('form-label')}\r\n                             htmlFor={label}>{label}</label>}\r\n            <Controller\r\n                control={control}\r\n                name={name}\r\n                rules={params}\r\n                render={({field}) => <RSelect\r\n                    {...field}\r\n                    clearIndicator={true}\r\n                    styles={customStyles(hasIn(errors, name))}\r\n                    id={label}\r\n                    options={options}\r\n                    components={{DropdownIndicator}}\r\n                    placeholder={placeholder}\r\n                />}\r\n            />\r\n            {errors[name]?.type == 'required' &&\r\n                <span className={'text-red-600 text-xs'}>This field is required</span>}\r\n            {errors[name]?.type == 'validation' &&\r\n                <span className={'text-red-600 text-xs'}>{get(errors, `${name}.message`)}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Select;","import React from 'react';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport {Controller} from \"react-hook-form\";\r\nimport {get, hasIn} from \"lodash\";\r\nimport dayjs from \"dayjs\";\r\nimport clsx from \"clsx\";\r\n\r\n\r\nconst CustomDatepicker = ({\r\n                              control,\r\n                              disabled = false,\r\n                              name,\r\n                              errors,\r\n                              params,\r\n                              property,\r\n                              defaultValue = new Date(),\r\n                              label,\r\n                              dateFormat = \"yyyy/MM/dd\",\r\n                          }) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label className={'form-label'}>{label ?? name}</label>\r\n            <Controller\r\n                control={control}\r\n                name={name}\r\n                rules={params}\r\n                defaultValue={defaultValue}\r\n                render={({field}) => (<DatePicker\r\n                    dateFormat={dateFormat}\r\n                    selected={dayjs(field.value).toDate()}\r\n                    onChange={(date) => field.onChange(date)}\r\n                    readOnly={disabled}\r\n                    showMonthYearPicker={get(property, 'showMonthYearPicker')}\r\n                    className={clsx('form-input pr-10', {'border-red-600': hasIn(errors, name)})}\r\n                />)\r\n                }\r\n            />\r\n            {errors[name]?.type == 'required' &&\r\n                <span className={'text-red-600 text-xs'}>This field is required</span>}\r\n            {errors[name]?.type == 'validation' &&\r\n                <span className={'text-red-600 text-xs'}>{get(errors, `${name}.message`)}</span>}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CustomDatepicker;","import React from 'react';\r\nimport {useForm} from \"react-hook-form\";\r\n\r\nconst Form = ({defaultValues, children, onSubmit}) => {\r\n    const methods = useForm({defaultValues});\r\n    const {handleSubmit, formState: {errors}, setError, clearErrors, reset} = methods;\r\n    const onSubmitRequest = (data) => {\r\n        onSubmit({data, setError, clearErrors, reset})\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmitRequest)}>\r\n            {React.Children.map(children, child => {\r\n                return child.props.name\r\n                    ? React.createElement(child.type, {\r\n                        ...{\r\n                            ...child.props,\r\n                            control: methods.control,\r\n                            setValue: methods.setValue,\r\n                            register: methods.register,\r\n                            key: child.props.name,\r\n                            errors: errors\r\n                        }\r\n                    })\r\n                    : child;\r\n            })}\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Form;","import React, {useState} from 'react';\r\nimport Title from \"../../../components/title\";\r\nimport GridView from \"../../../containers/grid-view\";\r\nimport {KEYS} from \"../../../constants/keys\";\r\nimport {URLS} from \"../../../constants/urls\";\r\nimport Form from \"../../../containers/form\";\r\nimport {get} from \"lodash\";\r\nimport InputSearch from \"../../../components/input\";\r\nimport {Input} from \"../../../containers/form/components\";\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {useGetAllQuery} from \"../../../hooks/api\";\r\nimport {OverlayLoader} from \"../../../components/loader\";\r\n\r\n\r\nconst TranslationsContainer = () => {\r\n    const [search, setSearch] = useState('')\r\n    const {data, isLoading} = useGetAllQuery({key: KEYS.locales, url: URLS.locales})\r\n    const {t} = useTranslation()\r\n    const [open, setOpen] = useState(false)\r\n    let columns = get(data, 'data', []).map(_locale => ({title: get(_locale, 'display'), key: get(_locale, 'code')}))\r\n    columns = [{\r\n        title: 'Key',\r\n        key: 'key',\r\n    }, ...columns]\r\n    if (isLoading) {\r\n        return <OverlayLoader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"grid grid-cols-12 items-center\">\r\n                <div className=\"col-span-8\">\r\n                    <Title>{t(\"Translations\")}</Title>\r\n                </div>\r\n                <div className=\"col-span-12 mt-8\">\r\n                    <GridView\r\n                        filters={<div className={'grid grid-cols-12 mb-5 gap-x-8'}>\r\n                            <div className=\"col-span-3\">\r\n                                <InputSearch setValue={setSearch} value={search} placeholder={t('Поиск')}/>\r\n                            </div>\r\n                        </div>}\r\n                        ModalBody={(onSubmit, defaultValues = {}) => <Form onSubmit={(data) => onSubmit(data)}\r\n                                                                           defaultValues={{\r\n                                                                               ...get(defaultValues, 'data', {}),\r\n                                                                           }}>\r\n\r\n                            <Input property={{disabled: true}} name={'key'}\r\n                                   placeholder={t('Key')}\r\n                                   label={t('Key')}\r\n                            />\r\n                            {get(data, 'data', []).map(_locale => <Input classNames={'mt-2'} name={get(_locale, 'code')}\r\n                                                                         placeholder={get(_locale, 'display')}\r\n                                                                         label={get(_locale, 'display')}\r\n                            />)\r\n\r\n                            }\r\n\r\n\r\n                            <button type={'submit'}\r\n                                    className={'w-full p-3.5 rounded-lg bg-primary block  text-white font-bold text-center h-12 mt-6'}>\r\n                                {t('Save')}\r\n                            </button>\r\n                        </Form>}\r\n                        openCreateModal={open}\r\n                        setOpenCreateModal={setOpen}\r\n                        hasActionColumn\r\n                        listKey={KEYS.translations}\r\n                        url={URLS.translations}\r\n                        columns={columns}\r\n                        dataKey={'data.data'}\r\n                        rowKey={'key'}\r\n                        params={{search}}\r\n                        viewUrl={URLS.translationsKey}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TranslationsContainer;","import React from 'react';\r\nimport TranslationsContainer from \"../containers/TranslationsContainer\";\r\n\r\nconst TranslationsPage = () => {\r\n    return (\r\n        <>\r\n            <TranslationsContainer />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TranslationsPage;","/**\n * The default argument placeholder value for methods.\n *\n * @type {Object}\n */\nmodule.exports = {};\n"],"names":["_ref","_ref$label","label","_ref$value","value","_ref$setValue","setValue","_ref$placeholder","placeholder","_ref$classNames","classNames","rest","_objectWithoutProperties","_excluded","handleChange","useMemo","e","debounce","target","_jsx","_Fragment","children","_jsxs","className","clsx","htmlFor","_objectSpread","defaultValue","onChange","type","_errors$name","_errors$name2","register","name","errors","property","params","hasIn","get","disabled","step","concat","DropdownIndicator","props","components","src","arrowIcon","alt","customStyles","hasError","arguments","length","undefined","control","base","state","error","background","borderColor","borderRadius","outline","display","overflow","padding","width","minWidth","minHeight","fontSize","fontWeight","indicatorSeparator","_ref$options","options","Controller","rules","render","_ref2","field","RSelect","clearIndicator","styles","id","_ref$disabled","_ref$defaultValue","Date","_ref$dateFormat","dateFormat","DatePicker","selected","dayjs","toDate","date","readOnly","showMonthYearPicker","defaultValues","onSubmit","methods","useForm","handleSubmit","formState","setError","clearErrors","reset","data","React","child","key","_useState","useState","_useState2","_slicedToArray","search","setSearch","_useGetAllQuery","useGetAllQuery","KEYS","url","URLS","isLoading","t","useTranslation","_useState3","_useState4","open","setOpen","columns","map","_locale","title","_toConsumableArray","OverlayLoader","Title","GridView","filters","InputSearch","ModalBody","Form","Input","openCreateModal","setOpenCreateModal","hasActionColumn","listKey","dataKey","rowKey","viewUrl","TranslationsContainer","module","exports"],"sourceRoot":""}