{"version":3,"file":"static/js/830.5af64444.chunk.js","mappings":"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","sources":["components/badge/index.jsx","modules/report/containers/ReportsContainer.jsx","modules/report/pages/ReportsPage.jsx"],"sourcesContent":["import React from 'react';\r\nimport clsx from \"clsx\";\r\nimport {REPORT_TYPE_STATUS} from \"../../constants\";\r\n\r\nconst Index = ({children, status = 'success'}) => {\r\n    return (\r\n        <span className={clsx('py-1 px-3 rounded-2xl font-semibold bg-[#FEF5ED] text-[#F2994A]', {\r\n            '!bg-[#EAF7F0] !text-[#27AE60]': status == REPORT_TYPE_STATUS.success,\r\n            '!bg-red-100 !text-[#EB5757]': status == REPORT_TYPE_STATUS.failed\r\n        })}>\r\n            {children}\r\n        </span>\r\n    );\r\n};\r\n\r\nexport default Index;","import React, {useState} from 'react';\r\nimport Title from \"../../../components/title\";\r\nimport GridView from \"../../../containers/grid-view\";\r\nimport {KEYS} from \"../../../constants/keys\";\r\nimport {URLS} from \"../../../constants/urls\";\r\nimport {useTranslation} from \"react-i18next\";\r\nimport Select from \"../../../components/select\";\r\nimport {REPORT_TYPE_STATUS, REPORT_TYPES} from \"../../../constants\";\r\nimport {get, isEqual, keys} from \"lodash\";\r\nimport config from \"../../../config\";\r\nimport useAuth from \"../../../hooks/auth/useAuth\";\r\nimport dayjs from \"dayjs\";\r\nimport Badge from \"../../../components/badge\";\r\n\r\n\r\nconst ReportsContainer = () => {\r\n    const {t} = useTranslation()\r\n    const {token} = useAuth({});\r\n    const [filter, setFilter] = useState({\r\n        reportType: null, reportStatus: null\r\n    });\r\n    const columns = [{\r\n        title: 'ID',\r\n        key: 'id', classnames: '!w-[80px] !min-w-0'\r\n    }, {\r\n        title: t('File name'),\r\n        key: 'file_name',\r\n        render: ({row}) => isEqual(get(row,'status'),REPORT_TYPE_STATUS.success) ? <a className={'text-blue-700'}\r\n                              href={`${config.FILE_URL}api/reports/${get(row, 'id')}?token=${token}`}\r\n                              target={'_self'}>{get(row, 'file_name')}</a> : <span className={'text-red-600'}>{get(row,'file_name')}</span>\r\n    }, {\r\n        title: t('Report type'), key: 'type',\r\n    },\r\n        {\r\n            title: t('Report status'),\r\n            key: 'status',\r\n            render:({value})=><Badge status={value}>{value}</Badge>\r\n        },\r\n        {\r\n            title: t('Created date'),\r\n            key: 'created_at',\r\n            render: ({row}) => dayjs(get(row, 'created_at')).format(\"DD-MM-YYYY HH:mm:ss\")\r\n        }\r\n    ]\r\n\r\n    return (<div>\r\n        <div className=\"grid grid-cols-12 items-center\">\r\n            <div className=\"col-span-12\">\r\n                <Title>{t(\"Reports\")}</Title>\r\n            </div>\r\n            <div className=\"col-span-12 mt-8\">\r\n                <GridView\r\n                    filters={<div className={'grid grid-cols-12 mb-5 gap-x-8'}>\r\n\r\n                        <div className=\"col-span-3\">\r\n                            <Select\r\n                                value={get(filter, 'reportType')}\r\n                                setValue={(val) => setFilter((prev) => ({...prev, reportType: val}))}\r\n                                label={t('Type')}\r\n                                options={keys(REPORT_TYPES).map(_type => ({value: _type, label: t(_type)}))}/>\r\n                        </div>\r\n                        <div className=\"col-span-3\">\r\n                            <Select\r\n                                value={get(filter, 'reportStatus')}\r\n                                setValue={(val) => setFilter((prev) => ({...prev, reportStatus: val}))}\r\n                                label={t('Status')}\r\n                                options={keys(REPORT_TYPE_STATUS).map(_type => ({value: _type, label: t(_type)}))}/>\r\n                        </div>\r\n                    </div>}\r\n                    listKey={KEYS.reports}\r\n                    url={URLS.reports}\r\n                    params={{status: get(filter, 'reportStatus.value'), type: get(filter, 'reportType.value')}}\r\n                    columns={columns}/>\r\n            </div>\r\n        </div>\r\n    </div>);\r\n};\r\n\r\nexport default ReportsContainer;","import React from 'react';\r\nimport ReportsContainer from \"../containers/ReportsContainer\";\r\n\r\nconst ReportsPage = () => {\r\n    return (\r\n        <>\r\n            <ReportsContainer/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ReportsPage;"],"names":["_ref","children","_ref$status","status","_jsx","className","clsx","REPORT_TYPE_STATUS","t","useTranslation","token","useAuth","_useState","useState","reportType","reportStatus","_useState2","_slicedToArray","filter","setFilter","columns","title","key","classnames","render","row","isEqual","get","href","concat","config","target","_ref2","value","Badge","_ref3","dayjs","format","_jsxs","Title","GridView","filters","Select","setValue","val","prev","_objectSpread","label","options","keys","REPORT_TYPES","map","_type","listKey","KEYS","url","URLS","params","type","_Fragment","ReportsContainer"],"sourceRoot":""}