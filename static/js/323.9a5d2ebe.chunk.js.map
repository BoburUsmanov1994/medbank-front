{"version":3,"file":"static/js/323.9a5d2ebe.chunk.js","mappings":"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","sources":["modules/references/containers/BaseRatesContainer.jsx","modules/references/pages/BaseRatesPage.jsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport Title from \"../../../components/title\";\r\nimport GridView from \"../../../containers/grid-view\";\r\nimport {KEYS} from \"../../../constants/keys\";\r\nimport {URLS} from \"../../../constants/urls\";\r\nimport {PlusCircle} from \"react-feather\";\r\nimport {NumericFormat} from \"react-number-format\";\r\nimport Form from \"../../../containers/form\";\r\nimport {get, head} from \"lodash\";\r\nimport {Datepicker, Input, Select} from \"../../../containers/form/components\";\r\nimport {useGetAllQuery} from \"../../../hooks/api\";\r\nimport {getDefaultValue} from \"../../../utils\";\r\nimport dayjs from \"dayjs\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\n\r\nconst BaseRatesContainer = () => {\r\n    const [open, setOpen] = useState(false)\r\n    const {t} = useTranslation()\r\n    const {data: levels} = useGetAllQuery({key: KEYS.organizationLevel, url: URLS.organizationLevel})\r\n    const {data: types} = useGetAllQuery({key: KEYS.organizationType, url: URLS.organizationType})\r\n    const columns = [\r\n        {\r\n            title: 'ID',\r\n            key: 'id',\r\n            classnames: '!w-[80px] !min-w-0'\r\n        },\r\n        {\r\n            title: t('Month'),\r\n            key: 'month',\r\n        },\r\n        {\r\n            title: t('Organization level'),\r\n            key: 'organization_level',\r\n        },\r\n        {\r\n            title: t('Organization type'),\r\n            key: 'organization_type',\r\n        },\r\n        {\r\n            title: t('Amount by count'),\r\n            key: 'amount_by_count',\r\n            render: ({value}) => <NumericFormat displayType={'text'} thousandSeparator={' '} value={value}/>\r\n        },\r\n        {\r\n            title: t('Amount by group'),\r\n            key: 'amount_by_group',\r\n            render: ({value}) => <NumericFormat displayType={'text'} thousandSeparator={' '} value={value}/>\r\n        },\r\n    ]\r\n    return (\r\n        <div>\r\n            <div className=\"grid grid-cols-12 items-center\">\r\n                <div className=\"col-span-8\">\r\n                    <Title>{t(\"Базовые ставки\")}</Title>\r\n                </div>\r\n                <div className=\"col-span-4 text-right\">\r\n                    <button\r\n                        onClick={() => setOpen(true)}\r\n                        className={'inline-flex items-center py-2.5 pl-2.5 pr-5 text-sm font-bold text-primary border border-primary rounded-lg'}>\r\n                        <PlusCircle size={20} className={'mr-1.5'}/>\r\n                        {t(\"Добавить\")}\r\n                    </button>\r\n                </div>\r\n                <div className=\"col-span-12 mt-8\">\r\n                    <GridView\r\n                        ModalBody={(onSubmit, defaultValues = {}) => <Form onSubmit={({data, ...rest}) => onSubmit({\r\n                            data: {\r\n                                ...data,\r\n                                month: parseInt(dayjs(get(data, 'month')).format(\"MM\")),\r\n                                organization_level_id: get(data, 'organization_level_id.value'),\r\n                                organization_type_id: get(data, 'organization_type_id.value')\r\n                            }, ...rest\r\n                        })}\r\n                                                                           defaultValues={{\r\n                                                                               ...get(defaultValues, 'data.data', {}),\r\n                                                                               organization_level_id:getDefaultValue(get(levels, 'data', []).map(level => ({\r\n                                                                                   value: get(level, 'id'),\r\n                                                                                   label: get(head(get(level, 'translations', [])), 'name')\r\n                                                                               })),parseInt(get(get(defaultValues, 'data.data', {}),'organization_level_id'))),\r\n                                                                               organization_type_id:getDefaultValue(get(types, 'data', []).map(type => ({\r\n                                                                                   value: get(type, 'id'),\r\n                                                                                   label: get(head(get(type, 'translations', [])), 'name')\r\n                                                                               })),parseInt(get(get(defaultValues, 'data.data', {}),'organization_type_id')))\r\n                                                                           }}>\r\n                            <Select name={'organization_level_id'} label={t('Organization level')}\r\n                                    params={{required: true}}\r\n                                    options={get(levels, 'data', []).map(level => ({\r\n                                        value: get(level, 'id'),\r\n                                        label: get(head(get(level, 'translations', [])), 'name')\r\n                                    }))}/>\r\n                            <Select name={'organization_type_id'} label={t('Organization type')} params={{required: true}}\r\n                                    options={get(types, 'data', []).map(type => ({\r\n                                        value: get(type, 'id'),\r\n                                        label: get(head(get(type, 'translations', [])), 'name')\r\n                                    }))}/>\r\n                            <Input name={'amount_by_group'} property={{type: 'number', step: 1}}\r\n                                   placeholder={t('Amount by group')}\r\n                                   label={t('Amount by group')}\r\n                            />\r\n                            <Input name={'amount_by_count'} property={{type: 'number', step: 1}}\r\n                                   placeholder={t('Amount by count')}\r\n                                   label={t('Amount by count')}\r\n                            />\r\n                            <Datepicker property={{showMonthYearPicker: true}} dateFormat={'MM'} name={'month'}\r\n                                        label={t('Month')}\r\n                                        params={{required: true}}/>\r\n                            <button type={'submit'}\r\n                                    className={'w-full p-3.5 rounded-lg bg-primary block w-full text-white font-bold text-center h-12 mt-6'}>\r\n                                {open ? t('Create') : t('Save')}\r\n                            </button>\r\n                        </Form>}\r\n                        openCreateModal={open}\r\n                        setOpenCreateModal={setOpen}\r\n                        hasActionColumn\r\n                        listKey={KEYS.baseRates} url={URLS.baseRates}\r\n                        columns={columns}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BaseRatesContainer;","import React from 'react';\r\nimport BaseRatesContainer from \"../containers/BaseRatesContainer\";\r\n\r\nconst BaseRatesPage = () => {\r\n    return (\r\n        <>\r\n         <BaseRatesContainer />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BaseRatesPage;"],"names":["_useState","useState","_useState2","_slicedToArray","open","setOpen","t","useTranslation","levels","useGetAllQuery","key","KEYS","url","URLS","data","types","columns","title","classnames","render","_ref","value","_jsx","NumericFormat","displayType","thousandSeparator","_ref2","children","_jsxs","className","Title","onClick","PlusCircle","size","GridView","ModalBody","onSubmit","defaultValues","arguments","length","undefined","Form","_ref3","rest","_objectWithoutProperties","_excluded","_objectSpread","month","parseInt","dayjs","get","format","organization_level_id","organization_type_id","getDefaultValue","map","level","label","head","type","Select","name","params","required","options","Input","property","step","placeholder","Datepicker","showMonthYearPicker","dateFormat","openCreateModal","setOpenCreateModal","hasActionColumn","listKey","_Fragment","BaseRatesContainer"],"sourceRoot":""}