{"version":3,"file":"static/js/265.540c9e09.chunk.js","mappings":"sUA+EA,EAjE8B,WAC1B,IAAAA,GAA4BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GACxBI,GAA0BC,EAAAA,EAAAA,IAAe,CAACC,IAAKC,EAAAA,EAAAA,QAAcC,IAAKC,EAAAA,EAAAA,UAA3DC,EAAIN,EAAJM,KAAMC,EAASP,EAATO,UACNC,GAAKC,EAAAA,EAAAA,MAALD,EACPE,GAAwBf,EAAAA,EAAAA,WAAS,GAAMgB,GAAAd,EAAAA,EAAAA,GAAAa,EAAA,GAAhCE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GAChBG,GAAUC,EAAAA,EAAAA,KAAIT,EAAM,OAAQ,IAAIU,KAAI,SAAAC,GAAO,MAAK,CAACC,OAAOH,EAAAA,EAAAA,KAAIE,EAAS,WAAYf,KAAKa,EAAAA,EAAAA,KAAIE,EAAS,QAAQ,IAK/G,OAJAH,EAAO,CAAI,CACPI,MAAO,MACPhB,IAAK,QACRiB,QAAAC,EAAAA,EAAAA,GAAKN,IACFP,GACOc,EAAAA,EAAAA,KAACC,EAAAA,EAAa,KAGrBD,EAAAA,EAAAA,KAAA,OAAAE,UACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iCAAgCF,SAAA,EAC3CF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,aAAYF,UACvBF,EAAAA,EAAAA,KAACK,EAAAA,EAAK,CAAAH,SAAEf,EAAE,qBAEda,EAAAA,EAAAA,KAAA,OAAKI,UAAU,mBAAkBF,UAC7BF,EAAAA,EAAAA,KAACM,EAAAA,EAAQ,CACLC,SAASP,EAAAA,EAAAA,KAAA,OAAKI,UAAW,iCAAiCF,UACtDF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,aAAYF,UACvBF,EAAAA,EAAAA,KAACQ,EAAAA,EAAW,CAACC,SAAU/B,EAAWgC,MAAOjC,EAAQkC,YAAaxB,EAAE,wCAGxEyB,UAAW,SAACC,GAAQ,IAAEC,EAAaC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,OAAKZ,EAAAA,EAAAA,MAACe,EAAAA,EAAI,CAACL,SAAU,SAAC5B,GAAI,OAAK4B,EAAS5B,EAAK,EAClC6B,eAAaK,EAAAA,EAAAA,GAAA,IACNzB,EAAAA,EAAAA,KAAIoB,EAAe,OAAQ,CAAC,IACjCZ,SAAA,EAEjDF,EAAAA,EAAAA,KAACoB,EAAAA,GAAK,CAACC,SAAU,CAACC,UAAU,GAAOC,KAAM,MAClCZ,YAAaxB,EAAE,OACfqC,MAAOrC,EAAE,UAEfO,EAAAA,EAAAA,KAAIT,EAAM,OAAQ,IAAIU,KAAI,SAAAC,GAAO,OAAII,EAAAA,EAAAA,KAACoB,EAAAA,GAAK,CAACK,WAAY,OAAQF,MAAM7B,EAAAA,EAAAA,KAAIE,EAAS,QACvCe,aAAajB,EAAAA,EAAAA,KAAIE,EAAS,WAC1B4B,OAAO9B,EAAAA,EAAAA,KAAIE,EAAS,YAC/D,KAKFI,EAAAA,EAAAA,KAAA,UAAQ0B,KAAM,SACNtB,UAAW,uFAAuFF,SACrGf,EAAE,YAEJ,EACPwC,gBAAiBpC,EACjBqC,mBAAoBpC,EACpBqC,iBAAe,EACfC,QAAShD,EAAAA,EAAAA,aACTC,IAAKC,EAAAA,EAAAA,aACLS,QAASA,EACTsC,QAAS,YACTC,OAAQ,MACRC,OAAQ,CAACxD,OAAAA,GACTyD,QAASlD,EAAAA,EAAAA,wBAMjC,EClEA,EARyB,WACrB,OACIgB,EAAAA,EAAAA,KAAAmC,EAAAA,SAAA,CAAAjC,UACIF,EAAAA,EAAAA,KAACoC,EAAqB,KAGlC,C","sources":["modules/settings/containers/TranslationsContainer.jsx","modules/settings/pages/TranslationsPage.jsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport Title from \"../../../components/title\";\r\nimport GridView from \"../../../containers/grid-view\";\r\nimport {KEYS} from \"../../../constants/keys\";\r\nimport {URLS} from \"../../../constants/urls\";\r\nimport Form from \"../../../containers/form\";\r\nimport {get} from \"lodash\";\r\nimport InputSearch from \"../../../components/input\";\r\nimport {Input} from \"../../../containers/form/components\";\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {useGetAllQuery} from \"../../../hooks/api\";\r\nimport {OverlayLoader} from \"../../../components/loader\";\r\n\r\n\r\nconst TranslationsContainer = () => {\r\n    const [search, setSearch] = useState('')\r\n    const {data, isLoading} = useGetAllQuery({key: KEYS.locales, url: URLS.locales})\r\n    const {t} = useTranslation()\r\n    const [open, setOpen] = useState(false)\r\n    let columns = get(data, 'data', []).map(_locale => ({title: get(_locale, 'display'), key: get(_locale, 'code')}))\r\n    columns = [{\r\n        title: 'Key',\r\n        key: 'key',\r\n    }, ...columns]\r\n    if (isLoading) {\r\n        return <OverlayLoader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"grid grid-cols-12 items-center\">\r\n                <div className=\"col-span-8\">\r\n                    <Title>{t(\"Translations\")}</Title>\r\n                </div>\r\n                <div className=\"col-span-12 mt-8\">\r\n                    <GridView\r\n                        filters={<div className={'grid grid-cols-12 mb-5 gap-x-8'}>\r\n                            <div className=\"col-span-3\">\r\n                                <InputSearch setValue={setSearch} value={search} placeholder={t('Поиск')}/>\r\n                            </div>\r\n                        </div>}\r\n                        ModalBody={(onSubmit, defaultValues = {}) => <Form onSubmit={(data) => onSubmit(data)}\r\n                                                                           defaultValues={{\r\n                                                                               ...get(defaultValues, 'data', {}),\r\n                                                                           }}>\r\n\r\n                            <Input property={{disabled: true}} name={'key'}\r\n                                   placeholder={t('Key')}\r\n                                   label={t('Key')}\r\n                            />\r\n                            {get(data, 'data', []).map(_locale => <Input classNames={'mt-2'} name={get(_locale, 'code')}\r\n                                                                         placeholder={get(_locale, 'display')}\r\n                                                                         label={get(_locale, 'display')}\r\n                            />)\r\n\r\n                            }\r\n\r\n\r\n                            <button type={'submit'}\r\n                                    className={'w-full p-3.5 rounded-lg bg-primary block  text-white font-bold text-center h-12 mt-6'}>\r\n                                {t('Save')}\r\n                            </button>\r\n                        </Form>}\r\n                        openCreateModal={open}\r\n                        setOpenCreateModal={setOpen}\r\n                        hasActionColumn\r\n                        listKey={KEYS.translations}\r\n                        url={URLS.translations}\r\n                        columns={columns}\r\n                        dataKey={'data.data'}\r\n                        rowKey={'key'}\r\n                        params={{search}}\r\n                        viewUrl={URLS.translationsKey}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TranslationsContainer;","import React from 'react';\r\nimport TranslationsContainer from \"../containers/TranslationsContainer\";\r\n\r\nconst TranslationsPage = () => {\r\n    return (\r\n        <>\r\n            <TranslationsContainer />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TranslationsPage;"],"names":["_useState","useState","_useState2","_slicedToArray","search","setSearch","_useGetAllQuery","useGetAllQuery","key","KEYS","url","URLS","data","isLoading","t","useTranslation","_useState3","_useState4","open","setOpen","columns","get","map","_locale","title","concat","_toConsumableArray","_jsx","OverlayLoader","children","_jsxs","className","Title","GridView","filters","InputSearch","setValue","value","placeholder","ModalBody","onSubmit","defaultValues","arguments","length","undefined","Form","_objectSpread","Input","property","disabled","name","label","classNames","type","openCreateModal","setOpenCreateModal","hasActionColumn","listKey","dataKey","rowKey","params","viewUrl","_Fragment","TranslationsContainer"],"sourceRoot":""}